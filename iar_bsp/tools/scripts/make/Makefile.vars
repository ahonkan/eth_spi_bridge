##----------------------------------------------------------------------------##
# Copyright 2010 Mentor Graphics Corporation                                   #
#    All Rights Reserved.                                                      #
##----------------------------------------------------------------------------##

# This file is generated by Fuse.
-include tools/scripts/make/Makefile.common

##
## Common variables needed for string manipulation.
##

comma :=,
empty :=
space := $(empty) $(empty)

# The canonical configuration name.
ifneq ($(USER_CONFIG),)
canonical-config := $(strip $(if $(findstring .config,$(USER_CONFIG)),\
                                 $(notdir $(basename $(USER_CONFIG))),\
                                 $(notdir $(USER_CONFIG))))
ifneq ($(CDTCONFIG),)
canonical-config := $(CDTCONFIG)
endif
else
canonical-config := $(subst $(space),.,$(sort $(subst ., ,$(CONFIG))))
endif

# If the current configuration is not equal to the specified configuration
# and the specified configuration is coming from the 'CONFIG' default, then
# we should keep the current configuration.  This allows commands like:
#    make CONFIG=release
#    make
# without the second make forcing a recompile of everything due to the
# config parameter changing.  In other words, the default 'CONFIG' should
# only be used on the first invocation when nothing is specified for 'CONFIG'.
# Finally, we must not use the 'CURRENT_CONFIG' if 'USER_CONFIG' has been 
# specified.
ifneq ($(CURRENT_CONFIG),)
ifneq ($(CURRENT_CONFIG),$(canonical-config))
ifneq ($(origin CONFIG),command line)
ifeq ($(USER_CONFIG),)
canonical-config := $(CURRENT_CONFIG)
endif
endif
endif
endif

# This file is generated by Fuse.
-include output/$(TOOLSET)/$(PLATFORM)/$(canonical-config)/scripts/common.mk

## The output directory structure is leveled according to toolset, platform,
## and configuration:
##    output
##     | <toolset_name>
##         |- <platform_name>
##             |- <configuration_name>
##                 |- bin
##                     |- <exe_name1>
##                     |- <exe_name2>
##                     ...
##                     |- <exe_nameN>
##                     |- obj
##                 |- lib
##                     |- <lib_name1>
##                     |- <lib_name2>
##                     ...
##                     |- <lib_nameN>
##                     |- obj

# The root directory for all output.
OUTPUT_DIR = output

# The root directory for storing build artifacts of a particular toolset.
TOOLSET_DIR = $(OUTPUT_DIR)/$(TOOLSET)

# The root directory for storing build artifacts of a particular platform.
PLATFORM_DIR = $(TOOLSET_DIR)/$(PLATFORM)

# The root directory for storing build artifacts of a particular configuration.
CONFIGURATION_DIR = $(PLATFORM_DIR)/$(canonical-config)

# The root location to store objects used to build a static library.
OBJ_DIR = $(CONFIGURATION_DIR)/objs

# The root directory for storing library build artifacts.
LIB_OUTPUT_DIR = $(CONFIGURATION_DIR)/lib

# The root directory for storing executable build artifacts.
EXE_OUTPUT_DIR = $(CONFIGURATION_DIR)/bin

# The root directory for storing process build artifacts.
PROC_OUTPUT_DIR = $(CONFIGURATION_DIR)/proc

# The root directory for storing generated make scripts.
SCRIPTS_OUTPUT_DIR = $(CONFIGURATION_DIR)/scripts

# The available hardware platforms.
available-platforms := $(notdir $(basename $(wildcard bsp/*/*.platform)))

# The available toolsets.
# NOTE: We do 'basename twice to remove the 'platform' name.
available-toolsets := $(sort $(notdir $(basename $(basename \
                $(wildcard bsp/*/toolset/*.toolset)))))

# Compute the available general configurations.
# 
# The idea here is to always search for a fixed number of configuration files
# related to the platform, toolset, and configuration.  The configuration files
# are named according to the following BNF-like syntax:
#
#    <platform>?.<toolset>?.<configuration>(.<configuration>)*'.config'
#
# where:
#
#    <platform>      - is the target hardware platform.
#    <toolset>       - is the name of the cross toolchain.
#    <configuration> - is the name of the general configuration.
#
# This allows configuration files to be managed more easily across the three
# axes since we can "focus" the files at an exact platform, toolset, or 
# configuration and any combination of those three.  For example, assume that
# the following files are in 'config':
#
#   config/
#       at91sam9263ek.config                - platform only options.
#       rvct.config                         - toolset only options.
#       at91sam9263ek.rvct.config           - platform and toolset options.
#       debug.config                        - 'debug' only options.
#       power.config                        - 'power mangement' only options.
#
# When someone uses:
#
#    make PLATFORM=at91sam9263ek TOOLSET=csgnu_arm CONFIG=power.debug
#
# the following 5 files are used: 'at91sam9263ek.config', 'rvct.config',
# 'at91sam9263ek.rvct.config', 'power.config', 'debug.config'.
# However, the 6 legal combinations: 'at91sam9263ek.power.config', 
# 'rvct.power.config', 'at91sam9263ek.rvct.power.config',
# 'at91sam9263ek.debug.config', 'rvct.debug.config', 
# 'at91sam9263ek.rvct.debug.config' are not used because those files
# do not actually exist.
#
# In general, according to the above grammar at most 
# '(2^2 - 1) + 2^2 * <number of general configurations>' configuration files
# will be applied.  For the above example, this means at most '3 + 4 * 2 = 11' 
# configuration files.

# Only apply the builtin configuration files when 'CONFIG' is used explicitly
# or implicitly for the first time.
ifeq ($(USER_CONFIG),)
ifeq ($(CURRENT_CONFIG),)
# If we have made it here, then we must be using the default configuration
# the first time around.
apply-config-files := y
else
# In this case, we have already configured once, but are explicitly changing
# configurations.
ifeq ($(origin CONFIG),command line)
apply-config-files := y
endif
endif
endif

ifeq ($(apply-config-files),y)
# The basic platform and toolset configurations.
base-configs := $(PLATFORM) $(TOOLSET) $(PLATFORM).$(TOOLSET)

# The general configurations requested by the user.
configs := $(subst ., ,$(canonical-config))

# All possible configurations considering the platform, toolset, and
# general configurations.
all-possible-configs := $(base-configs) \
                        $(foreach a-config,$(base-configs),\
                            $(addprefix $(a-config).,$(configs))) \
                        $(configs)

# The configuration files that actually exist in the tree.
config-files := $(addprefix config/,\
                    $(addsuffix .config,$(all-possible-configs)))
config-files := $(config-files) $(addprefix bsp/*/config/,\
                    $(addsuffix .config,$(all-possible-configs)))
existing-config-files := $(wildcard $(config-files))
endif

# A list of all of the pre-defined system configurations.
available-configs := $(sort $(subst ., ,\
                         $(notdir $(basename $(wildcard config/*.config)))))
available-configs := $(sort $(available-configs) $(subst ., ,\
                         $(notdir $(basename $(wildcard bsp/*/config/*.config)))))
available-configs := $(filter-out $(available-toolsets),$(available-configs))
available-configs := $(filter-out $(available-platforms),$(available-configs))

# The general configurations requested by the user which are actually valid.
valid-configs := $(strip $(foreach config-name,$(configs),\
                            $(filter $(config-name),$(available-configs))))

